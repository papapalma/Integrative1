#include <WiFi.h>
#include <HTTPClient.h>
#include <DHT.h>
#include <time.h>

#define DHTPIN 32      // Pin where the DHT11 is connected
#define DHTTYPE DHT11  // DHT 11
#define LIGHT_SENSOR_PIN 33 

DHT dht(DHTPIN, DHTTYPE);

// WiFi credentials
const char* ssid = "realme_9i";
const char* password = "1234abcde";

// NTP Time Configuration
const char* ntpServer = "time.google.com";
const long gmtOffset_sec = 8 * 3600; // GMT+8 for the Philippines
const int daylightOffset_sec = 0;

// Firestore API URL (Replace with your actual Firestore key)
const char* firestoreUrl = "https://firestore.googleapis.com/v1/projects/esp32-17d6e/databases/(default)/documents/sensorData?key=AIzaSyBfOtl2xzd3CMK2-lCWHpf9q9Lvn5yxNA8";

void setup() {
    Serial.begin(115200);
    dht.begin();
    analogSetAttenuation(ADC_11db);

    // Connect to WiFi
    WiFi.begin(ssid, password);
    Serial.print("Connecting to WiFi");
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) { // Timeout after 20 seconds
        delay(1000);
        Serial.print(".");
        attempts++;
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nConnected to WiFi");
    } else {
        Serial.println("\nFailed to connect to WiFi. Restarting...");
        ESP.restart();
    }

    // Configure NTP time
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
}

String getCurrentTimestamp() {
    struct tm timeinfo;
    if (!getLocalTime(&timeinfo)) {
        Serial.println("Failed to obtain time");
        return "Unknown";
    }
    char timeString[30];
    strftime(timeString, sizeof(timeString), "%Y-%m-%dT%H:%M:%S", &timeinfo);
    return String(timeString);
}

void loop() {
    // Reading temperature and humidity values
    float temp = dht.readTemperature();
    float humidity = dht.readHumidity();
    int analogValue = analogRead(LIGHT_SENSOR_PIN);
    
    // Validate sensor readings
    if (isnan(temp) || isnan(humidity)) {
        Serial.println("Failed to read from DHT sensor!");
        delay(5000);
        return;
    }

    // Determine light level
    String lightLevel;
    if (analogValue < 40) {
        lightLevel = "Dark";
    } else if (analogValue < 800) {
        lightLevel = "Dim";
    } else if (analogValue < 2000) {
        lightLevel = "Light";
    } else if (analogValue < 3200) {
        lightLevel = "Bright";
    } else {
        lightLevel = "Very bright";
    }

    // Get current timestamp
    String timestamp = getCurrentTimestamp();

    // Print readings to Serial Monitor
    Serial.print("Time: "); Serial.print(timestamp);
    Serial.print(", Temperature: "); Serial.print(temp); Serial.print(" Â°C");
    Serial.print(", Humidity: "); Serial.print(humidity); Serial.print(" %");
    Serial.print(", Light Level: "); Serial.print(lightLevel);
    Serial.print(" (Analog: "); Serial.print(analogValue); Serial.println(")");

    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;

        // Prepare JSON payload
        String payload = "{"
            "\"fields\": {"
            "\"timestamp\": {\"stringValue\": \"" + timestamp + "\"},"
            "\"temperature\": {\"doubleValue\": " + String(temp) + "},"
            "\"humidity\": {\"doubleValue\": " + String(humidity) + "},"
            "\"light\": {\"stringValue\": \"" + lightLevel + "\"}"
            "}"
        "}";

        http.begin(firestoreUrl);
        http.addHeader("Content-Type", "application/json");

        // Send HTTP POST request
        int httpResponseCode = http.POST(payload);
        Serial.print("HTTP Response code: "); Serial.println(httpResponseCode);
        
        if (httpResponseCode > 0) {
            Serial.println("Data sent successfully.");
            Serial.println(http.getString());
        } else {
            Serial.println("Error sending data to Firestore.");
        }
        http.end();
    } else {
        Serial.println("WiFi not connected. Skipping data upload.");
    }

    // Wait before the next measurement
    delay(5000);
}
